# vim:ft=python
#
# * Copyright 2010, Google Inc.
# *
# * ***** BEGIN LICENSE BLOCK *****
# * Version: MPL 1.1
# *
# * The contents of this file are subject to the Mozilla Public License Version
# * 1.1 (the "License"); you may not use this file except in compliance with
# * the License. You may obtain a copy of the License at
# * http://www.mozilla.org/MPL/
# *
# * Software distributed under the License is distributed on an "AS IS" basis,
# * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# * for the specific language governing rights and limitations under the
# * License.
# *
# * The Original Code is the GPG Browser Bridge.
# *
# * The Initial Developer of the Original Code is Google Inc.
# *
# * Portions created by the Initial Developer are Copyright (C) 2010
# * the Initial Developer. All Rights Reserved.
# *
# * Contributor(s):
# *   Phil Dibowitz <fixxxer@google.com>
# *   Fredrik Roubert <roubert@google.com>
# *   Phil Ames <philames@google.com>
# *
# * ***** END LICENSE BLOCK *****
#

import os
import sys
import zipfile

import SCons.Action

#
# The NSPR, GMock and GTest libraries can be installed in many different
# locations and have different internal directory structure depending on the
# platform, version and whether installed by a package manager or built from
# source. The options below make all these paths configurable on the command
# line while attempting to provide sensible defaults for most cases.
#

def AddPathOption(name, id, dest, part, metavar, description):
  AddOption(
      '--with-%s-%s' % (id, part),
      dest = dest,
      metavar = metavar,
      type = 'string',
      help = 'Search for %s %s in %s.' % (name, description, metavar),
      )

def AddPrefixOption(name):
  id = name.lower()
  AddPathOption(name, id, id, 'prefix', 'PREFIX', 'files')

def AddIncludeOption(name):
  id = name.lower()
  AddPathOption(name, id, id + '_cpp', 'include', 'DIR', 'header files')

def AddLibdirOption(name):
  id = name.lower()
  AddPathOption(name, id, id + '_lib', 'libdir', 'DIR', 'object code libraries')

if sys.platform == 'win32':
  AddPrefixOption('XULRunner')
else:
  if sys.platform == 'darwin':
    AddPrefixOption('MacPorts')
  AddPrefixOption('NSPR')

AddIncludeOption('NSPR')
AddLibdirOption('NSPR')

if sys.platform == 'win32':
  AddPrefixOption('GMock')
  AddIncludeOption('GMock')
  AddLibdirOption('GMock')
  AddIncludeOption('GTest')
  AddLibdirOption('GTest')
else:
  AddOption(
      '--with-gmock-config',
      dest = 'gmock_config',
      metavar = 'BIN',
      type = 'string',
      help = 'Use GMock config script BIN.',
  )

#
# The SCons options framework can't handle default values that depend on the
# value of other options, so the series of if statements below handle default
# values to minimize the necessary command line.
#

def GetDirFromOption(name, *default):
  value = GetOption(name)
  return Dir(value is None and Dir(*default) or value)

def GetFileFromOption(name, *default):
  value = GetOption(name)
  return File(value is None and File(*default) or value)

if sys.platform == 'win32':
  XULRUNNER = GetDirFromOption('xulrunner', '/xulrunner-sdk')
  NSPR_CPP = GetDirFromOption('nspr_cpp', 'include', XULRUNNER)
  NSPR_LIB = GetDirFromOption('nspr_lib', 'lib', XULRUNNER)
  GMOCK = GetDirFromOption('gmock', '../../gmock-1.5.0')
  GMOCK_CPP = GetDirFromOption('gmock_cpp', 'include', GMOCK)
  GMOCK_LIB = GetDirFromOption('gmock_lib', 'msvc/Release', GMOCK)
  GTEST_CPP = GetDirFromOption('gtest_cpp', 'gtest/include', GMOCK)
  GTEST_LIB = GetDirFromOption('gtest_lib', GMOCK_LIB)
elif sys.platform == 'darwin':
  MACPORTS = GetDirFromOption('macports', '/opt/local')
  NSPR = GetDirFromOption('nspr', MACPORTS)
  NSPR_CPP = GetDirFromOption('nspr_cpp', 'include/nspr', NSPR)
  NSPR_LIB = GetDirFromOption('nspr_lib', 'lib/nspr', NSPR)
  GMOCK_CONFIG = GetFileFromOption('gmock_config', 'bin/gmock-config', MACPORTS)
else:
  NSPR = GetDirFromOption('nspr', '/usr')
  NSPR_CPP = GetDirFromOption('nspr_cpp', 'include/nspr', NSPR)
  NSPR_LIB = GetDirFromOption('nspr_lib', 'lib', NSPR)
  GMOCK_CONFIG = GetFileFromOption('gmock_config', 'gmock-config')

#
# The source files.
#

IDL_SOURCES = [
    'gnupg.idl',
    'types.idl',
    ]

PLUGIN_SOURCES = [
    'gnupg.cc',
    'logging.cc',
    'plugin.cc',
    'prefs.cc',
    'tmpwrapper.cc',
    ]

GLUE_SOURCES = [
    'common.cc',
    'main.cc',
    'npn_api.cc',
    ]

TEST_SOURCES = [
    'gnupg_unittest.cc',
    'tmpwrapper_unittest.cc',
    ]

# static_object.cc is a special case since it is required for gnupg_unittest,
# but including the other NPAPI sources above results in redefinition of
# methods that are stubbed out in gnupg_unittest.cc (e.g. the NPN_xxx methods):
STATIC_GLUE_SOURCES = ['static_object.cc']

# Only used on Windows:
RESOURCES = []

# JavaScript shared by all extensions:
COMMON_JS = ['extensions/common/gpg_common.js']

if sys.platform == 'win32':
  PLUGIN_SOURCES.append('windows/createprocess.cc')
  RESOURCES.append('windows/npgnupg.rc')

#
# The build environment.
#

env = Environment(
    # Force 32-bit toolchain in 64-bit Windows:
    TARGET_ARCH = 'x86',
    THIRD_PARTY = '../third_party',
    PRSTREAMS_DIR = '$THIRD_PARTY/prstreams',
    NIXYSA_DIR = '$THIRD_PARTY/nixysa/nixysa',
    NPAPI_DIR = '$THIRD_PARTY/nixysa/third_party/npapi/include',
    GLUE_DIR = '$NIXYSA_DIR/static_glue/npapi',
    AUTOGEN_DIR = 'autogen',
    )

env.AppendUnique(
    CPPPATH = [
        '.',
        '$PRSTREAMS_DIR',
        '$NPAPI_DIR',
        '$GLUE_DIR',
        '$AUTOGEN_DIR',
        NSPR_CPP,
        ],
    LIBPATH = [NSPR_LIB],
    # Used by codegen.bat and codegen.sh:
    ENV = {'PYTHON': sys.executable},
    )

if sys.platform == 'win32':
  env.AppendUnique(
      CPPDEFINES = [
          # npapi.h: Configure for Windows:
          '_WINDOWS',
          # winnt.h: Necessary to define when _WINDOWS is defined:
          '_X86_',
          # windows.h: Exclude rarely-used services:
          'WIN32_LEAN_AND_MEAN',
          # windef.h: Get standard C++ min() and max():
          'NOMINMAX',
          'OS_WINDOWS',
          'XP_WIN',
          ],
      # This should really be the default, SCons:
      RCFLAGS = ['/nologo'],
      CODEGEN = 'codegen.bat',
      )
else:
  if sys.platform == 'darwin':
    # Build Mach-O universal binaries for these architectures:
    universal_flags = ['-arch', 'i386', '-arch', 'x86_64']
    env.Prepend(CCFLAGS = universal_flags, LINKFLAGS = universal_flags)
    env.AppendUnique(CPPDEFINES = ['OS_MACOSX', 'XP_MACOSX'])
  elif sys.platform == 'linux2':
    env.AppendUnique(CPPDEFINES = ['OS_LINUX'])
  env.AppendUnique(
      CPPDEFINES = ['XP_UNIX'],
      CODEGEN = 'codegen.sh',
      )

if env['CC'] == 'cl':
  env.AppendUnique(CCFLAGS = ['/MT', '/EHsc'])

#
# Up to this point, the same Environment is shared between all targets but here
# this Environment is cloned and customized for the different targets.
#

# The autogenerated code should be compiled without showing warnings.
nixysa_env = env.Clone()

# The handwritten code should be compiled with a high warning level.
if env['CC'] == 'cl':
  env.PrependUnique(CCFLAGS = ['/W3'])
else:
  env.PrependUnique(CCFLAGS = ['-Wall', '-Werror'])

# It would be nice if prstreams one day became a standard part of the NSPR
# library. Until then, we have our own copy of the prstreams source from NSPR
# and build our own library with this special build rule. Not nice, but works.
prstrms = env.StaticLibrary(
    'prstrms',
    env.SharedObject('$PRSTREAMS_DIR/prstrms.cpp')
    )
env.AppendUnique(LIBS = ['nspr4'] + prstrms)

# The plugin itself might need extra link flags.
plugin_env = env.Clone()

if plugin_env['CC'] == 'cl':
  plugin_env.AppendUnique(LINKFLAGS = [r'/def:windows\npgnupg.def'])

if sys.platform == 'darwin':
  plugin_env.Append(LINKFLAGS = ['-framework', 'CoreFoundation'])

# The test should be linked with testing libraries.
test_env = env.Clone()

if test_env['CC'] == 'cl':
  # Link flags for compatibility with GMock:
  test_env.AppendUnique(LINKFLAGS = ['/LTCG'])

if sys.platform == 'win32':
  test_env.AppendUnique(
      CPPPATH = [GMOCK_CPP, GTEST_CPP],
      LIBPATH = [GMOCK_LIB, GTEST_LIB],
      LIBS = ['gmock'],
  )
else:
  test_env.MergeFlags(
      test_env.ParseFlags(
          '!' + GMOCK_CONFIG.path + ' --cppflags --cxxflags --ldflags --libs'
      )
  )

del env  # Prevent this Environment from being used by mistake later on.

#
# NIXYSA
#

NixysaAction = SCons.Action.CommandAction([
    File('$CODEGEN', nixysa_env.subst('$NIXYSA_DIR')).path,
    '--output-dir=$AUTOGEN_DIR',
    '--generate=npapi',
    '$SOURCES',
    ])

def NixysaEmitter(target, source, env):
  bases = [os.path.splitext(s.name)[0] for s in source] + ['globals']
  targets = ['$AUTOGEN_DIR/%s_glue.cc' % b for b in bases]
  targets += ['$AUTOGEN_DIR/%s_glue.h' % b for b in bases]
  targets += ['$AUTOGEN_DIR/hash', '$AUTOGEN_DIR/parsetab.py']
  return targets, source

nixysa_env['BUILDERS']['Nixysa'] = Builder(
    action = NixysaAction,
    emitter = NixysaEmitter,
    )

AUTOGEN_OUTPUT = nixysa_env.Nixysa(IDL_SOURCES)
AUTOGEN_SOURCES = [f for f in AUTOGEN_OUTPUT if f.suffix == '.cc']
autogen_objs = [nixysa_env.SharedObject(s) for s in AUTOGEN_SOURCES]

glue_objs = [nixysa_env.SharedObject(s) for s in [
    File(f, nixysa_env.subst('$GLUE_DIR')) for f in GLUE_SOURCES
    ]]

static_glue_objs = [nixysa_env.SharedObject(s) for s in [
    File(f, nixysa_env.subst('$GLUE_DIR')) for f in STATIC_GLUE_SOURCES
    ]]

#
# PLUGIN
#

plugin_objs = [plugin_env.SharedObject(s) for s in PLUGIN_SOURCES]
resources = [plugin_env.RES(r) for r in RESOURCES]

plugin_parts = (
    plugin_objs +
    autogen_objs +
    glue_objs +
    static_glue_objs +
    resources
    )

plugin = plugin_env.SharedLibrary('npgnupg', plugin_parts)

# Safari doesn't provide the NSPR library, like Chrome and Firefox does, so the
# library needs to be statically linked to the plugin. Unfortunately, it seems
# like there isn't any way to get the Mach-O linker to select a static version
# of a library if it can find a dynamic version of it and it also seems like
# the 32-bit static version of NSPR doesn't work (it causes link errors).
# Therefore a special version of the plugin is built for Safari (which luckliy
# is a 64-bit binary on modern machines) by editing the build variables to
# replace the NSPR link directive with the path to the static library and
# remove i386 from the included architectures.
if sys.platform == 'darwin':
  libs = plugin_env.get('LIBS')
  nspr = plugin_env.FindFile('libnspr4.a', plugin_env.get('LIBPATH'))
  libs[libs.index('nspr4')] = nspr

  linkflags = plugin_env.get('LINKFLAGS')
  i = linkflags.index('i386')
  del linkflags[i-1:i+1]

  plugin_nspr_64 = plugin_env.SharedLibrary('npgnupg-nspr-64', plugin_parts)

#
# TESTS
#

test_objs = [test_env.SharedObject(s) for s in TEST_SOURCES]

unittest = test_env.Program(
    'gnupg_unittest',
    test_objs +
    plugin_objs +
    static_glue_objs
    )

#
# EXTENSIONS
#

ext_env = Environment()

ext_env.Install('extensions/chrome', source = COMMON_JS + plugin)
ext_env.Install('extensions/firefox/content', source = COMMON_JS)
ext_env.Install('extensions/safari/gpg.safariextension', source = COMMON_JS)

def XpiAction(target, source, env):
  zf = zipfile.ZipFile(str(target[0]), 'w', zipfile.ZIP_DEFLATED)
  root = str(source[0])
  for dirpath, _, filenames in os.walk(root):
    for it in filenames:
      filename = os.path.join(dirpath, it)
      arcname = os.path.relpath(filename, root)
      zf.write(filename, arcname)
  zf.close()

ext_env['BUILDERS']['Xpi'] = Builder(
    action = XpiAction,
    source_factory = SCons.Node.FS.Entry,
    source_scanner = SCons.Defaults.DirScanner,
    suffix = '.xpi',
    )

ext_firefox = ext_env.Xpi('extensions/gpg.xpi', ['extensions/firefox'])

# Chrome wants to connect to an X server:
ext_env.AppendUnique(
    ENV = {
        'DISPLAY': os.environ.get('DISPLAY'),
        'XAUTHORITY': os.environ.get('XAUTHORITY'),
        },
    )

CrxAction = SCons.Action.CommandAction([
   'cd', 'extensions', '&&',
    os.environ.get('CHROME', 'google-chrome'), '--pack-extension=chrome',
    ])

ext_env['BUILDERS']['Crx'] = Builder(
    action = CrxAction,
    source_factory = SCons.Node.FS.Entry,
    source_scanner = SCons.Defaults.DirScanner,
    suffix = '.crx',
    )

ext_chrome = ext_env.Crx('extensions/chrome.crx', ['extensions/chrome'])

Default(plugin)
